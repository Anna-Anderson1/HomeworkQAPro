'number' + 3 + 3; // Результат: 'number33'
/* При додаванні рядка та числа, число перетворюється на рядок і відбувається конкатенація. Спочатку об'єднуються 'number' та 3, а потім до 'number3' доєднується ще 3. */   

null + 3; // Результат: 3
// null - це 0. Відбувається додаваняя 0+3 .

5 && "qwerty"; // Результат: "qwerty"
/* Число 5 є true. Стрічка "qwerty" також є true. При використанні логічного оператору  && виводиться останнє значення яке дає true, при умові що у виразі немає false. */

+'40' + +'2' + "hillel"; // Результат: "42hillel"
/* +'40' переводить строкову цифру у число, +'2' так само переводить у число. 40+2=42. Далі відбувається конкатинація, 42 перетворюється у рядок і об'єднується з "hillel".*/ 

'10' - 5 === 6; // Результат: false
/* При виконанні математичного віднімання рядок перетворюється на число і виконується віднімання. Виходить 5 === 6, що не є істиною, тому false. */ 

true + false; // Результат: 1
/* При виконанні математичного додавання булеві значення пертворюються на 1 + 0 і виводиться сума у вигляді числа. */

'4px' - 3; // NaN
/* Перетворення рядка на число не вдалося, тому JS не зміг виповнити арифметичну дію і видав not a number. */

'4' - 3; // Результат: 1
// Відбулося перетворення рядка на число і математичне відніманння.

'6' + 3 ** 0; // Результат: '61'
/* За пріорітетністю 3 приводиться у нульову ступунь, що дорівнює 1. При додаванні рядка до числа, число перетворюється на рядок і відбувається конкатинація. В результаті отримуємо рядок з об'єднаних цифр 6 та 1 у рядковому вигляді. */

12 / '6'; // Результат: 2
// Рядок перетворюється на число і виконується математичне ділення.

'10' + (5 === 6); // Результат: '10false'
/* Спочатку виконується дія у дужках. 5 строго не дорівнює 6, тому результат false. Далі відбувається перетворення булевого значення на рядок і конкатинація. Отримуємо рядок з об'єднаними цифрою 10 та результатом дії у дужках. */

null == ''; // Результат: false
/* '' приводиться до числового вигляду. Пустий рядок є false, а false є 0. Але null при порівнянні з іншими типами данних (окрім undefined) видає результат false.*/ 

3 ** (9 / 3); // Результат: 27
// Спочатку робимо дію в дужках, отримуємо 3. 3 приводимо до третього ступеню.

!!'false' == !!'true'; // Результат: true
/* false та true мають рядковий тип данних. Вони перетворюються на булевий тип: будь який не пустий рядок в булевому типі данних є true, числове значення true = 1. ! - це заперечення, а !! - заперечення заперечення, тобто первинне значення. Порівняння 1 == 1 є вірним, тому true. */

0 || '0' && 1 // Результат: 1
/* Спочатку за пріорітетністю виконується логічне і. '0' дає true (це не пустий рядок), 1 також дає true. Виводиться останнє значення яке видало true, це 1. Далі виконується логічне або: 0 дає false, а 1 (яка вийшла при виконанні логічного і) дає true. При використанні логічного або виводиться перше значення яке видає true і це 1. */ 

(+null == false) < 1; // Результат: false
/* Спочатку виконується дія у дужках (0 == 0) буде true. true це 1. 1<1 невірно, тому false. */ 

false && true || true; // Результат: true
/* За пріорітетністю виконуємо логічне і. Логічне і видає перше false, яке зустрічається у виразі. Тому результат логічного і є false. Далі виконується логічне або false || true, яке видає перше значення true, яке йому зустрічається. */  

false && (false || true); // Результат: false
/* За пріорітетністю виконується дія у дужках, тобто логічне або. Результатом логічного або є true. Далі виконуємо логічне і false && true, яке виводить перше false, яке зустрічає. */

(+null == false) < 1 ** 5; / Результат: false
/* Спочатку виконується дія у дужках. +null переводить у число 0. false = 0. Порівняння має результат true. Далі 1 приводиться до 5го ступеню = 1. 1<1 невірно.*/ 